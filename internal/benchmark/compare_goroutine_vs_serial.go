//go:build benchmark

// File ini digunakan untuk membandingkan kecepatan pengecekan URL
// antara menggunakan goroutine dan tanpa goroutine.
// Tidak digunakan untuk kode produksi.
package main

import (
	"fmt"
	"sync"
	"time"
	"upgak/internal/checker"
)

func main() {
	urls := []string{
		"example.com",
		"google.com",
		"github.com",
		"stackoverflow.com",
		"golang.org",
		"reddit.com",
		"wikipedia.org",
		"yahoo.com",
		"bing.com",
		"duckduckgo.com",
		"amazon.com",
		"facebook.com",
		"twitter.com",
		"linkedin.com",
		"instagram.com",
		"apple.com",
		"microsoft.com",
		"netflix.com",
		"openai.com",
		"cloudflare.com",
		"digitalocean.com",
		"heroku.com",
		"medium.com",
		"wordpress.com",
		"blogger.com",
		"tumblr.com",
		"pinterest.com",
		"quora.com",
		"slack.com",
		"zoom.us",
		"dropbox.com",
		"box.com",
		"adobe.com",
		"salesforce.com",
		"shopify.com",
		"paypal.com",
		"stripe.com",
		"trello.com",
		"asana.com",
		"notion.so",
		"airbnb.com",
		"booking.com",
		"expedia.com",
		"tripadvisor.com",
		"uber.com",
		"lyft.com",
		"doordash.com",
		"grubhub.com",
		"yelp.com",
		"example.com",
		"google.com",
		"github.com",
		"stackoverflow.com",
		"golang.org",
		"reddit.com",
		"wikipedia.org",
		"yahoo.com",
		"bing.com",
		"duckduckgo.com",
		"amazon.com",
		"facebook.com",
		"twitter.com",
		"linkedin.com",
		"instagram.com",
		"apple.com",
		"microsoft.com",
		"netflix.com",
		"openai.com",
		"cloudflare.com",
		"digitalocean.com",
		"heroku.com",
		"medium.com",
		"wordpress.com",
		"blogger.com",
		"tumblr.com",
		"pinterest.com",
		"quora.com",
		"slack.com",
		"zoom.us",
		"dropbox.com",
		"box.com",
		"adobe.com",
		"salesforce.com",
		"shopify.com",
		"paypal.com",
		"stripe.com",
		"trello.com",
		"asana.com",
		"notion.so",
		"airbnb.com",
		"booking.com",
		"expedia.com",
		"tripadvisor.com",
		"uber.com",
		"lyft.com",
		"doordash.com",
		"grubhub.com",
		"yelp.com",
		"example.com",
		"google.com",
		"github.com",
		"stackoverflow.com",
		"golang.org",
		"reddit.com",
		"wikipedia.org",
		"yahoo.com",
		"bing.com",
		"duckduckgo.com",
		"amazon.com",
		"facebook.com",
		"twitter.com",
		"linkedin.com",
		"instagram.com",
		"apple.com",
		"microsoft.com",
		"netflix.com",
		"openai.com",
		"cloudflare.com",
		"digitalocean.com",
		"heroku.com",
		"medium.com",
		"wordpress.com",
		"blogger.com",
		"tumblr.com",
		"pinterest.com",
		"quora.com",
		"slack.com",
		"zoom.us",
		"dropbox.com",
		"box.com",
		"adobe.com",
		"salesforce.com",
		"shopify.com",
		"paypal.com",
		"stripe.com",
		"trello.com",
		"asana.com",
		"notion.so",
		"airbnb.com",
		"booking.com",
		"expedia.com",
		"tripadvisor.com",
		"uber.com",
		"lyft.com",
		"doordash.com",
		"grubhub.com",
		"yelp.com",
		"example.com",
		"google.com",
		"github.com",
		"stackoverflow.com",
		"golang.org",
		"reddit.com",
		"wikipedia.org",
		"yahoo.com",
		"bing.com",
		"duckduckgo.com",
		"amazon.com",
		"facebook.com",
		"twitter.com",
		"linkedin.com",
		"instagram.com",
		"apple.com",
		"microsoft.com",
		"netflix.com",
		"openai.com",
		"cloudflare.com",
		"digitalocean.com",
		"heroku.com",
		"medium.com",
		"wordpress.com",
		"blogger.com",
		"tumblr.com",
		"pinterest.com",
		"quora.com",
		"slack.com",
		"zoom.us",
		"dropbox.com",
		"box.com",
		"adobe.com",
		"salesforce.com",
		"shopify.com",
		"paypal.com",
		"stripe.com",
		"trello.com",
		"asana.com",
		"notion.so",
		"airbnb.com",
		"booking.com",
		"expedia.com",
		"tripadvisor.com",
		"uber.com",
		"lyft.com",
		"doordash.com",
		"grubhub.com",
		"yelp.com",
		"github.com",
		"stackoverflow.com",
		"golang.org",
		"reddit.com",
		"wikipedia.org",
		"yahoo.com",
		"bing.com",
		"duckduckgo.com",
		"amazon.com",
		"facebook.com",
		"twitter.com",
		"linkedin.com",
		"instagram.com",
		"apple.com",
		"microsoft.com",
		"netflix.com",
		"openai.com",
		"cloudflare.com",
		"digitalocean.com",
		"heroku.com",
		"medium.com",
		"wordpress.com",
		"blogger.com",
		"tumblr.com",
		"pinterest.com",
		"quora.com",
		"slack.com",
		"zoom.us",
		"dropbox.com",
		"box.com",
		"adobe.com",
		"salesforce.com",
		"shopify.com",
		"paypal.com",
		"stripe.com",
		"trello.com",
		"asana.com",
		"notion.so",
		"airbnb.com",
		"booking.com",
		"expedia.com",
		"tripadvisor.com",
		"uber.com",
		"lyft.com",
		"doordash.com",
		"grubhub.com",
		"yelp.com",
	}

	// --- Cara 1: Dengan goroutine ---
	startGoroutine := time.Now()
	var wg sync.WaitGroup
	wg.Add(len(urls))
	fmt.Printf("Checking %d URLs with goroutine...\n", len(urls))

	for _, u := range urls {
		go func(u string) {
			defer wg.Done()
			if !(len(u) > 7 && (u[:7] == "http://" || u[:8] == "https://")) {
				u = "http://" + u
			}
			// ok := checker.IsUp(u)
			checker.IsUp(u)
		}(u)
	}

	wg.Wait()
	elapsedGoroutine := time.Since(startGoroutine)
	fmt.Printf("Done checking all URLs with goroutine in %s\n\n", elapsedGoroutine)

	// --- Cara 2: Tanpa goroutine ---
	startSerial := time.Now()
	// count all URLs
	fmt.Printf("Checking %d URLs without goroutine...\n", len(urls))
	for _, u := range urls {
		if !(len(u) > 7 && (u[:7] == "http://" || u[:8] == "https://")) {
			u = "http://" + u
		}
		// ok := checker.IsUp(u)
		checker.IsUp(u)
	}
	elapsedSerial := time.Since(startSerial)
	fmt.Printf("Done checking all URLs without goroutine in %s\n", elapsedSerial)
}
